Each Windows message may have up to two parameters, wParam and lParam.
wParam contains two values, HIWORD and LOWORD
HIWORD is the notifacation message(if applicable)
LOWORD is the control or menu id that sent the message.
lParam is the HWND(window handle) to the control which sent the message or NULL if the messages isn't from a control.
a Message Loop:
    while(GetMessage(&Msg,NULL,0,0) > 0):
    {
        TranslateMessage(&Msg);
        DispatchMessage(&Msg);
    }
    GetMessage()    return a positive value indicating there is a message to be processed, and that it has filled in the members of the MSG structure we passed it.
                    return 0 if it hits WM_QUIT
                    return a negative value if an error occured
    
    TranslateMessage():
                    this does a bit of additional processing, translating virtual key messages into character messages.
    DispatchMessage():
                    what it does is take the message, checks which window it is for and then looks up the Window Procedure for the winodw.
                    it then calls that procedure, sending as parameters the handle of the window, the message, and wParam and lParam.


Windows Messages:    
    The system passes input to a window procedure in the form of a message.
    Messages are generated by both the system and applications.
    The system generates a message at each input event. such as the user types, moves the mouse, or clicks a control like a scroll bar.
    An application can generate messages to direct its own windows to perform tasks or to communicate with windows in other applications.

    Messages: a window handle, a message identifier, and two values called message parameters.
    a window handle: identifies the window for which the message is intended.
    a message identifier: identifies the purpose of a message.
    message parameters: specify data or the location of data used by a window procedure.

Message Types:
    system-defined messages:
        0x0000 - 0x03FF(WM_USER - 1) for system-defined messages. Application cannot use these values for private messages.
        0x0400(WM_USER) - 0x7FFF are available for message identifiers for private window classes.
        0x8000(WM_APP) - 0xBFFF for private messages if your application is marked version 4.0
        0xC000 - 0xFFFF when an application calls the RegisterWindowMessage function to register a message.
    application-defined messages:
    
Message Routing:
    the system uses two methods to route messages to a window procedure:
        posting messages to a first-in, first-out queue called a message queue
            mouse, keyboard, timer, paint, and quit messages
        a system-defined memory object that temporarily stores messages, and sending messages directly to a window procedure.
            most other messages, which are sent directly to a window procedure, are called nonqueued messages.
    Queued Messages:
        the system maintains a single system message queue and one thread-specific message queue for each GUI thread.
        all threads are created initially without a message queue to avoid the overhead of creating a message queue for non-GUI threads.
        device driver converts the input into messages and places them in the system message queue.
        system message queue    ---->   thread message queue
                                remove 
                                
        filling an MSG structure and then copying it to the message queue.
        MSG includes:   the handle of window,
                        the message identifier,
                        the two message parameters,
                        the time the message was posted,
                        the mouse cursor position
        PostMessage/PostThreadMessage: a thread can post a message to its own message queue or to the queue of another thread by using the PostMessage or PostThreadMessage function.
        GetMessage: an application can remove a message from its queue.
        PeekMessage: to examine a message without removing it from its queue. this function fills MSG with information about the message.
        DispatchMessage: after removing a message from its queue, use this function to direct the system to send the message to a window procedure for processing.
        WaitMessage: a thread can use this to yield control to other threads when it has no messages in its message queue.
        
        
        
    Nonqueued Messages:
        BroadcastSystemMessage:
        BroadcastSystemMessageEx:
        SendMessage:
        SendMessageTimeout:
        SendNotifyMessage:

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    








